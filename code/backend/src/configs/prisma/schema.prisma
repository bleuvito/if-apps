datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  MAHASISWA
  DOSEN
  PENGURUS
  KALAB
  KAJUR
  ADMIN
}

enum Day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum LecturerScheduleType {
  CONSULTATION
  CLASS
  OTHER
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  RESCHEDULE
}

model User {
  id                      String  @id @unique @default(uuid())
  email                   String  @unique
  name                    String
  role                    Role
  webRefreshToken         String? @db.VarChar(512)
  androidRefreshToken     String? @db.VarChar(512)
  announcements           AnnouncementHeader[]
  announcementTags        AnnouncementTag[]
  schedule                LecturerSchedule[]
  appointmentOrganizer    Appointment[] @relation("organizer")
  appointmentParticipant  Appointment[] @relation("participant")
}

// model Role {
//   id    String  @id @unique @default(uuid()) 
//   name  String  @unique

//   users User[]
// }

model AnnouncementHeader {
  id            String  @id @unique @default(uuid())
  gmailThreadId String
  recipient     String
  subject       String
  isPinned      Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  bodies        AnnouncementBody[]
  tags          AnnouncementTag[]
  
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model AnnouncementBody {
  id            String @id @unique @default(uuid())
  gmailId       String
  body          String
  snippet       String
  createdAt     DateTime @default(now())
  isLatest      Boolean @default(true)
  attachments   AnnoucementAttachment[]

  headerId      String
  header        AnnouncementHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)
}

model AnnouncementTag {
  id            String  @id @unique @default(uuid())
  name          String  @unique
  isDeleted     Boolean @default(false)

  // headerId      String
  // header        AnnouncementHeader @relation(fields: [headerId], references: [id])
  headers       AnnouncementHeader[]
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model AnnoucementAttachment {
  id                  String @id @unique @default(uuid())
  gDriveId            String
  name                String
  size                String
  webViewLink         String

  announcementBodyId  String
  announcementBody    AnnouncementBody @relation(fields: [announcementBodyId], references: [id], onDelete: Cascade)
}

model Appointment {
  id                      String @id @unique @default(uuid())
  gCalendarId             String
  topic                   String
  // date                 DateTime
  startDateTime           DateTime
  endDateTime             DateTime
  isParticipantAttending  Boolean @default(false)
  type                    LecturerScheduleType @default(CONSULTATION)
  status                  AppointmentStatus @default(PENDING)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())

  organizerId             String
  organizer               User @relation("organizer", fields: [organizerId], references: [id])
  participantId           String
  participant             User @relation("participant", fields: [participantId], references: [id])
}

model LecturerSchedule {
  id                String @id @unique @default(uuid())
  day               Day
  startDateTime     DateTime
  endDateTime       DateTime
  type              LecturerScheduleType
  createdDateTime   DateTime @default(now())
  updatedAtTime  DateTime @default(now())
  
  lecturerId        String
  lecturer          User @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}