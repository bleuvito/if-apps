datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  MAHASISWA
  DOSEN
  PENGURUS
  KALAB
  KAJUR
  ADMIN
}

enum Day {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
  MINGGU
}

enum ScheduleType {
  PERTEMUAN
  KELAS
  PINJAMRUANG
  LAINNYA
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  RESCHEDULE
}

model User {
  id                        String  @id @unique @default(uuid())
  email                     String  @unique
  name                      String
  role                      Role
  webRefreshToken           String? @db.VarChar(512)
  androidRefreshToken       String? @db.VarChar(512)

  announcements             AnnouncementHeader[]
  announcementTags          AnnouncementTag[]
  schedules                 LecturerSchedule[]
  reservations              RoomReservation[]
  appointmentOrganizers     Appointment[] @relation("organizer")
  appointmentParticipants   Appointment[] @relation("participant")
}

model AnnouncementHeader {
  id            String  @id @unique @default(uuid())
  gmailThreadId String
  recipient     String
  subject       String
  isPinned      Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  
  bodies        AnnouncementBody[]
  tags          AnnouncementTag[]
  
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model AnnouncementBody {
  id            String @id @unique @default(uuid())
  gmailId       String
  body          String
  snippet       String
  createdAt     DateTime @default(now())
  isLatest      Boolean @default(true)
  
  attachments   AnnoucementAttachment[]

  headerId      String
  header        AnnouncementHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)
}

model AnnouncementTag {
  id            String  @id @unique @default(uuid())
  name          String  @unique
  isDeleted     Boolean @default(false)

  // headerId      String
  // header        AnnouncementHeader @relation(fields: [headerId], references: [id])
  headers       AnnouncementHeader[]
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model AnnoucementAttachment {
  id                  String @id @unique @default(uuid())
  gDriveId            String
  name                String
  size                String
  webViewLink         String

  announcementBodyId  String
  announcementBody    AnnouncementBody @relation(fields: [announcementBodyId], references: [id], onDelete: Cascade)
}

model Appointment {
  id                      String @id @unique @default(uuid())
  gCalendarId             String
  topic                   String
  // date                 DateTime
  start                   DateTime
  end                     DateTime
  type                    ScheduleType @default(PERTEMUAN)
  status                  AppointmentStatus @default(PENDING)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())

  organizerId             String
  organizer               User @relation("organizer", fields: [organizerId], references: [id])
  participantId           String
  participant             User @relation("participant", fields: [participantId], references: [id])
}

model LecturerSchedule {
  id                String @id @unique @default(uuid())
  gCalendarId       String
  title             String
  type              ScheduleType
  day               Day
  start             DateTime
  end               DateTime
  isRecurring       Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  
  lecturerId        String
  lecturer          User @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}

model Room {
  id          String @id @unique @default(uuid())
  name        String
  capacity    Int
  description String

  schedules     RoomSchedule[]
  reservations  RoomReservation[]
}

model RoomSchedule {
  id                String @id @unique @default(uuid())
  title             String
  type              ScheduleType
  day               Day
  start             DateTime
  end               DateTime
  isRecurring       Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  
  roomId            String
  room              Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model RoomReservation {
  id                      String @id @unique @default(uuid())
  title                   String
  // date                 DateTime
  start                   DateTime
  end                     DateTime
  type                    ScheduleType @default(PERTEMUAN)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())

  roomId                  String
  room                    Room @relation(fields: [roomId], references: [id])
  reserveeId              String
  reservee                User @relation(fields: [reserveeId], references: [id])
}